using System;
using System.Collections.Generic;
using System.Text;

class Solution{
	
static void reverse(char[] A, int l, int h)
{
	if (l < h)
	{
		char ch = A[l];
		A[l] = A[h];
		A[h] = ch;
		reverse(A, l + 1, h - 1);
	}
}

// Function to return the modified string
static string reverseParentheses(string str)
{
	Stack<int> st = new Stack<int>();
	int len = str.Length;
	for(int i = 0; i < len; i++)
	{		
		// Push the index of the current
		// opening bracket
		if (str[i] == '(')
		{
			st.Push(i);
		}
		
		// Reverse the substring starting
		// after the last encountered opening
		// bracket till the current character
		else if (str[i] == ')')
		{
			char[] A = str.ToCharArray();
			reverse(A, st.Peek() + 1, i);
			str = new string(A);
			st.Pop();
		}
	}
	
	// To store the modified string
	string res = "";
	for(int i = 0; i < len; i++)
	{
		if (str[i] != ')' && str[i] != '(')
		{
			res += str[i];
		}
	}
	return res;
}

static public void Main()
{
	string str = "(123(456)789)";	
	int len = str.Length;
	
	Console.WriteLine(reverseParentheses(str));
}
}
